generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id                      Int                @id @default(autoincrement())
  username                String             @unique
  email                   String             @unique
  password                String
  full_name               String
  phone                   String?
  avatar_url              String?
  status                  Status             @default(active)
  is_admin                Boolean            @default(false)
  loyalty_points          Int                @default(0)
  social_id               String?
  googleId                String?
  githubId                String?
  facebookId              String?
  device_token            String?
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
  verifyEmail             Boolean            @default(false)
  refreshToken            String?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  verifiedAt              DateTime?
  forgotPasswordOtp       String?            @db.VarChar(6)
  forgotPasswordExpiry    DateTime?
  role                    String             @default("User")
  lastLoginDate           DateTime?
  user_addresses          UserAddress[]
  user_notifications      UserNotification[]
  Shop                    Shop?
  ShopFollower            ShopFollower[]
  Order                   Order[]
  Review                  Review[]

  @@map("users")
}

enum Status {
  active
  inactive
  banned
}

model UserAddress {
  id             Int      @id @default(autoincrement())
  user_id        Int
  recipient_name String
  phone          String
  address_line1  String
  address_line2  String?
  city           String
  district       String
  ward           String
  is_default     Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id])

  @@map("user_addresses")
}

model UserNotification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  type       String
  content    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])

  @@map("user_notifications")
}

// Shops
model Shop {
  id              Int            @id @default(autoincrement())
  user_id         Int            @unique
  name            String
  description     String
  logo_url        String?
  banner_url      String?
  rating          Float
  followers       Int            @default(0)
  is_verified     Boolean        @default(false)
  return_policy   String?
  shipping_policy String?
  bank_info       Json?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  user            User           @relation(fields: [user_id], references: [id])
  shop_followers  ShopFollower[]
  products        Product[]
  ShopVoucher     ShopVoucher[]
  Order           Order[]

  @@map("shops")
}

model ShopFollower {
  shop_id     Int
  user_id     Int
  followed_at DateTime
  shop        Shop     @relation(fields: [shop_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@id([shop_id, user_id])
  @@map("shop_followers")
}

// Categories
model Category {
  id               Int                     @id @default(autoincrement())
  name             String
  description      String?
  icon_url         String?
  img_banner       String?
  meta_title       String?
  meta_description String?
  is_active        Boolean                 @default(true)
  created_at       DateTime                @default(now())
  sub_categories   SubCategory[]
  attributes       CategoryAttributeType[]

  @@map("categories")
}

model SubCategory {
  id            Int       @id @default(autoincrement())
  category_id   Int
  name          String
  description   String?
  icon_url      String?
  display_order Int       @default(1)
  created_at    DateTime  @default(now())
  category      Category  @relation(fields: [category_id], references: [id])
  products      Product[]

  @@map("sub_categories")
}

// Products
model Product {
  id                 Int                @id @default(autoincrement())
  shop_id            Int
  subcategory_id     Int
  name               String
  description        String
  base_price         Decimal
  category_path      String?
  stock_quantity     Int
  rating             Float
  sales_count        Int
  warranty_info      String?
  weight             Decimal
  dimensions         String?
  meta_keywords      String?
  view_count         Int                @default(0)
  is_active          Boolean            @default(true)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  shop               Shop               @relation(fields: [shop_id], references: [id])
  sub_category       SubCategory        @relation(fields: [subcategory_id], references: [id])
  product_images     ProductImage[]
  product_attributes ProductAttribute[]
  product_variants   ProductVariant[]
  Review             Review[]

  @@map("products")
}

model ProductImage {
  id            Int      @id @default(autoincrement())
  product_id    Int
  image_url     String
  display_order Int
  is_thumbnail  Boolean
  created_at    DateTime @default(now())
  product       Product  @relation(fields: [product_id], references: [id])

  @@map("product_images")
}

model AttributeType {
  id               Int                     @id @default(autoincrement())
  name             String
  is_multiple      Boolean                 @default(false)
  created_at       DateTime                @default(now())
  attribute_values AttributeValue[]
  categories       CategoryAttributeType[]

  @@map("attribute_types")
}

model CategoryAttributeType {
  category_id       Int
  attribute_type_id Int
  created_at        DateTime      @default(now())
  category          Category      @relation(fields: [category_id], references: [id], onDelete: Cascade)
  attribute_type    AttributeType @relation(fields: [attribute_type_id], references: [id], onDelete: Cascade)

  @@id([category_id, attribute_type_id])
  @@map("category_attribute_types")
}

model AttributeValue {
  id               Int                @id @default(autoincrement())
  type_id          Int
  value            String
  created_at       DateTime           @default(now())
  type             AttributeType      @relation(fields: [type_id], references: [id])
  ProductAttribute ProductAttribute[]

  @@map("attribute_values")
}

model ProductAttribute {
  product_id         Int
  attribute_value_id Int
  product            Product        @relation(fields: [product_id], references: [id])
  attribute_value    AttributeValue @relation(fields: [attribute_value_id], references: [id])

  @@id([product_id, attribute_value_id])
  @@map("product_attributes")
}

model ProductVariant {
  id          Int     @id @default(autoincrement())
  product_id  Int
  sku         String  @unique
  combination Json
  price       Decimal
  stock       Int
  image_url   String?
  barcode     String?

  created_at DateTime    @default(now())
  product    Product     @relation(fields: [product_id], references: [id])
  OrderItem  OrderItem[]

  @@map("product_variants")
}

// Promotions and Vouchers
model Promotion {
  id                 Int                @id @default(autoincrement())
  name               String
  type               String
  discount_value     Decimal
  start_date         DateTime
  end_date           DateTime
  is_active          Boolean            @default(true)
  usage_limit        Int
  used_count         Int                @default(0)
  created_at         DateTime           @default(now())
  product_promotions ProductPromotion[]

  @@map("promotions")
}

model ProductPromotion {
  product_id    Int
  promotion_id  Int
  special_price Decimal
  start_time    DateTime
  end_time      DateTime
  Promotion     Promotion? @relation(fields: [promotionId], references: [id])
  promotionId   Int?

  @@id([product_id, promotion_id])
  @@map("product_promotions")
}

model ShopVoucher {
  id               Int      @id @default(autoincrement())
  shop_id          Int
  code             String   @unique
  type             String
  value            Decimal
  min_order_value  Decimal
  usage_limit      Int
  valid_from       DateTime
  valid_to         DateTime
  is_public        Boolean  @default(false)
  terms_conditions String?
  created_at       DateTime @default(now())
  shop             Shop     @relation(fields: [shop_id], references: [id])
  Order            Order[]

  @@map("shop_vouchers")
}

// Shopping Cart
model Cart {
  id         Int        @id @default(autoincrement())
  user_id    Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  cart_items CartItem[]

  @@map("carts")
}

model CartItem {
  cart_id       Int
  variant_id    Int
  quantity      Int
  price_at_time Decimal
  Cart          Cart?   @relation(fields: [cartId], references: [id])
  cartId        Int?

  @@id([cart_id, variant_id])
  @@map("cart_items")
}

model Order {
  id                  Int            @id @default(autoincrement())
  user_id             Int
  shop_id             Int
  total_amount        Decimal
  shipping_fee        Decimal
  status              OrderStatus
  order_date          DateTime       @default(now())
  address_id          Int
  payment_method      String
  tracking_number     String?
  courier_name        String?
  notes               String?
  voucher_id          Int?
  discount_amount     Decimal
  cancellation_reason String?
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  user                User           @relation(fields: [user_id], references: [id])
  shop                Shop           @relation(fields: [shop_id], references: [id])
  order_items         OrderItem[]
  order_history       OrderHistory[]
  shop_voucher        ShopVoucher?   @relation(fields: [voucher_id], references: [id])

  @@map("orders")
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled

  @@map("order_status")
}

model OrderItem {
  id              Int            @id @default(autoincrement())
  order_id        Int
  variant_id      Int
  quantity        Int
  unit_price      Decimal
  subtotal        Decimal
  created_at      DateTime       @default(now())
  order           Order          @relation(fields: [order_id], references: [id])
  product_variant ProductVariant @relation(fields: [variant_id], references: [id])

  @@map("order_items")
}

model OrderHistory {
  id          Int      @id @default(autoincrement())
  order_id    Int
  status      String
  description String?
  created_at  DateTime @default(now())
  order       Order    @relation(fields: [order_id], references: [id])

  @@map("order_history")
}

// Reviews and Ratings
model Review {
  id          Int           @id @default(autoincrement())
  user_id     Int
  product_id  Int
  order_id    Int
  rating      Int
  comment     String
  created_at  DateTime      @default(now())
  user        User          @relation(fields: [user_id], references: [id])
  product     Product       @relation(fields: [product_id], references: [id])
  ReviewImage ReviewImage[]

  @@map("reviews")
}

model ReviewImage {
  id         Int      @id @default(autoincrement())
  review_id  Int
  image_url  String
  created_at DateTime @default(now())
  review     Review   @relation(fields: [review_id], references: [id])

  @@map("review_images")
}
